import os
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


# –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    [["–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å"], ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]],
    resize_keyboard=True
)


# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó =====
def generate_task(level):
    if level == "–ª–µ–≥–∫–∏–π":
        a, b = random.randint(1, 20), random.randint(1, 20)
        op = random.choice(["+", "-"])
        question = f"{a} {op} {b}"
        answer = eval(question)
    elif level == "—Å–µ—Ä–µ–¥–Ω—ñ–π":
        op = random.choice(["*", "/"])
        if op == "*":
            a, b = random.randint(2, 12), random.randint(2, 12)
            answer = a * b
        else:
            b = random.randint(2, 12)
            answer = random.randint(2, 12)
            a = answer * b
        question = f"{a} {op} {b}"
    else:  # —Å–∫–ª–∞–¥–Ω–∏–π
        ops = ["+", "-", "*", "/"]
        b, c = random.randint(2, 12), random.randint(2, 12)
        op1, op2 = random.choice(ops), random.choice(ops)
        if op1 == "/":
            b = random.randint(2, 12)
            tmp = random.randint(2, 12)
            a = b * tmp
        else:
            a = random.randint(2, 12)
        expr = f"{a} {op1} {b} {op2} {c}"
        answer = int(eval(expr))
        question = expr
    return question, answer


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "level": "–ª–µ–≥–∫–∏–π",
        "tasks": 0,
        "correct": 0,
        "wrong": 0,
        "active_task": None
    }
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –±–æ—Ç.\n\n"
        "üìö –û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤ –º–µ–Ω—é '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', "
        "–∞–±–æ –ø–æ—á–Ω–∏ –∑ –ª–µ–≥–∫–æ–≥–æ —Ä—ñ–≤–Ω—è.\n\n"
        "‚û°Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è', —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏!",
        reply_markup=main_keyboard
    )


async def new_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω–∏ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
        return

    level = user_data[user_id]["level"]
    question, answer = generate_task(level)
    user_data[user_id]["active_task"] = answer

    await update.message.reply_text(f"‚úèÔ∏è –†–æ–∑–≤ º—è–∂–∏: {question} = ?", reply_markup=main_keyboard)


async def check_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or user_data[user_id]["active_task"] is None:
        return

    try:
        user_answer = int(update.message.text)
        correct_answer = user_data[user_id]["active_task"]

        user_data[user_id]["tasks"] += 1
        if user_answer == correct_answer:
            user_data[user_id]["correct"] += 1
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!", reply_markup=main_keyboard)
        else:
            user_data[user_id]["wrong"] += 1
            await update.message.reply_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}",
                reply_markup=main_keyboard
            )
        user_data[user_id]["active_task"] = None
    except ValueError:
        pass


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "—Å–∫–ª–∞–¥–Ω–∏–π"]]
    await update.message.reply_text(
        "‚öôÔ∏è –û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )


async def set_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    if text in ["–ª–µ–≥–∫–∏–π", "—Å–µ—Ä–µ–¥–Ω—ñ–π", "—Å–∫–ª–∞–¥–Ω–∏–π"]:
        user_data[user_id]["level"] = text
        await update.message.reply_text(
            f"‚úÖ –†—ñ–≤–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {text}", reply_markup=main_keyboard
        )


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    stats = user_data.get(user_id)
    if not stats:
        await update.message.reply_text("–ù–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—Ç–∏—Å–Ω–∏ /start")
        return

    await update.message.reply_text(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–†—ñ–≤–µ–Ω—å: {stats['level']}\n"
        f"–ü—Ä–∏–∫–ª–∞–¥—ñ–≤ —Ä–æ–∑–≤ º—è–∑–∞–Ω–æ: {stats['tasks']}\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: {stats['correct']}\n"
        f"–ü–æ–º–∏–ª–∫–æ–≤–∏—Ö: {stats['wrong']}",
        reply_markup=main_keyboard
    )


async def end_session(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        await update.message.reply_text(
            "‚úÖ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n"
            "–Ø–∫—â–æ –∑–∞—Ö–æ—á–µ—à –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É '–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è'.",
            reply_markup=main_keyboard
        )
        user_data[user_id]["active_task"] = None


def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–ù–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è$"), new_task))
    app.add_handler(MessageHandler(filters.Regex("^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è$"), settings))
    app.add_handler(MessageHandler(filters.Regex("^–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–µ–∞–Ω—Å$"), end_session))
    app.add_handler(MessageHandler(filters.TEXT, set_level))
    app.add_handler(MessageHandler(filters.TEXT, check_answer))

    app.run_polling()


if __name__ == "__main__":
    main()
